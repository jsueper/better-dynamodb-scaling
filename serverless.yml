service: better-dynamodb-scaling

provider:
  name: aws
  region: 'us-west-2'
  stage: ${opt:stage, 'dev'}
  runtime: nodejs6.10
  logRetentionInDays: 14
  tracing: true
  deploymentBucket:
    name: ${self:provider.stage}-${self:provider.region}-nuskin-sls 
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cloudwatch:PutMetricAlarm
        - cloudwatch:PutMetricData
        - cloudwatch:DescribeAlarms
        - cloudwatch:GetMetricStatistics
        - cloudwatch:SetAlarmState
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:BatchWriteItem
        - dynamodb:PutItem
        - dynamodb:UpdateTable
      Resource: "*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "arn:aws:lambda:us-west-2:*:function:${self:service}-${opt:stage, self:provider.stage}-*"
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource: "*"     

functions:
  scale_up_dynamodb:
    handler: functions/scale_up_dynamodb.handler    
    events:
      - sns:
          topicName: scale_up_writes_dynamodb
          displayName: Scale Up DynamoDB table WCU
      - sns:
          topicName: scale_up_reads_dynamodb
          displayName: Scale Up DynamoDB table RCU

  generate_linear_load:
    handler: functions/generate_linear_load.handler
    timeout: 300

  generate_head_heavy_load:
    handler: functions/generate_head_heavy_load.handler
    timeout: 300

  change_cw_alarm:
    handler: functions/change_cw_alarm.handler
    environment:
      accountId: 
        Ref: AWS::AccountId
      region:
        ${opt:region, self:provider.region}
    events:
      - cloudwatchEvent:
          event:
            source:
              - aws.monitoring
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - monitoring.amazonaws.com
              eventName:
                - PutMetricAlarm


plugins:
  - serverless-plugin-tracing